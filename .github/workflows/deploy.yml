name: Deploy with Github Actions to an instance EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Set up SonarCloud
      uses: sonarsource/sonarqube-scan-action@v5.0.0
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORG }}"

    - name: Check SonarCloud Quality Gate status
      run: |
        echo "Checking SonarCloud Quality Gate status..."
        RESULT=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
        echo "SonarCloud API response: $RESULT"
        STATUS=$(echo $RESULT | jq -r '.projectStatus.status')
        if [ "$STATUS" != "OK" ]; then
          echo "SonarCloud Quality Gate failed! Status: $STATUS"
          echo "Details:"
          echo $RESULT | jq -r '.projectStatus.conditions[] | select(.status == "ERROR") | "Metric: \(.metricKey) - Actual Value: \(.actualValue) - Error Threshold: \(.errorThreshold)"'
          exit 1
        else
          echo "SonarCloud Quality Gate passed!"
        fi
    
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create a zip of the project files
      run: |
        echo "Creating a zip file of the project..."
        zip -r project.zip .

    - name: Delete previous project from S3
      run: |
        echo "Deleting previous project from S3..."
        aws s3 rm s3://my-reallife/mywebapp.zip

    - name: Upload new project to S3
      run: |
        echo "Uploading new project to S3..."
        aws s3 cp project.zip s3://my-reallife/mywebapp.zip

    - name: Deploy using AWS CodeDeploy
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name production \
          --deployment-group-name mydg \
          --s3-location bucket=my-reallife,key=mywebapp.zip,bundleType=zip \
          --query "deploymentId" \
          --output text)
        echo "Deployment started with ID: $DEPLOYMENT_ID"

    - name: Check deployment status
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name production --deployment-group-name mydg --query "deployments[0]" --output text)
        aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
