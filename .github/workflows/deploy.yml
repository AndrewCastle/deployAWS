name: Desplegar con Github Actions a una instancia EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Revisar el código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Configurar SonarCloud
      uses: sonarsource/sonarqube-scan-action@v5.0.0
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORG }}"

    - name: Verificar el estado del Quality Gate de SonarCloud
      run: |
        echo "Verificando el estado del Quality Gate de SonarCloud..."
        RESULT=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
        echo "Respuesta de la API de SonarCloud: $RESULT"
        STATUS=$(echo $RESULT | jq -r '.projectStatus.status')
        if [ "$STATUS" != "OK" ]; then
          echo "¡Quality Gate de SonarCloud falló! Estado: $STATUS"
          echo "Detalles:"
          echo $RESULT | jq -r '.projectStatus.conditions[] | select(.status == "ERROR") | "Métrica: \(.metricKey) - Valor Actual: \(.actualValue) - Umbral de Error: \(.errorThreshold)"'
          exit 1
        else
          echo "¡Quality Gate de SonarCloud aprobado!"
        fi

    - name: Configurar AWS CLI
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Crear un archivo zip de los archivos del proyecto
      run: |
        echo "Creando un archivo zip del proyecto..."
        zip -r project.zip .

    - name: Eliminar el proyecto anterior de S3
      run: |
        echo "Eliminando el proyecto anterior de S3..."
        aws s3 rm s3://my-reallife/mywebapp.zip

    - name: Subir el nuevo proyecto a S3
      run: |
        echo "Subiendo el nuevo proyecto a S3..."
        aws s3 cp project.zip s3://my-reallife/mywebapp.zip

    - name: Desplegar usando AWS CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name production \
          --deployment-group-name mydg \
          --s3-location bucket=my-reallife,key=mywebapp.zip,bundleType=zip

    - name: Monitorear el estado del despliegue
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments --application-name production --deployment-group-name mydg --query "deployments[0]" --output text)
        echo "Despliegue iniciado con ID: $DEPLOYMENT_ID"
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ]; do
          echo "Verificando el estado del despliegue..."
          RESULT=$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID)
          STATUS=$(echo $RESULT | jq -r '.deploymentInfo.status')
          echo "Estado actual del despliegue: $STATUS"
          if [ "$STATUS" == "Failed" ]; then
            echo "¡El despliegue falló!"
            echo "Detalles: $RESULT"
            exit 1
          fi
          if [ "$STATUS" == "Succeeded" ]; then
            echo "¡El despliegue fue exitoso!"
            break
          fi
          sleep 5
        done
